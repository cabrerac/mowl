/**
 */
package mowl.provider;

import java.util.ArrayList;
import java.util.Collection;

import mowl.util.mowlAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class mowlItemProviderAdapterFactory extends mowlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public mowlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.Multiontology} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiontologyItemProvider multiontologyItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.Multiontology}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiontologyAdapter() {
		if (multiontologyItemProvider == null) {
			multiontologyItemProvider = new MultiontologyItemProvider(this);
		}

		return multiontologyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.LinkProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkPropertyItemProvider linkPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.LinkProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkPropertyAdapter() {
		if (linkPropertyItemProvider == null) {
			linkPropertyItemProvider = new LinkPropertyItemProvider(this);
		}

		return linkPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.EquivalentLinkProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EquivalentLinkPropertyItemProvider equivalentLinkPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.EquivalentLinkProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEquivalentLinkPropertyAdapter() {
		if (equivalentLinkPropertyItemProvider == null) {
			equivalentLinkPropertyItemProvider = new EquivalentLinkPropertyItemProvider(this);
		}

		return equivalentLinkPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.SubLinkPropertyOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubLinkPropertyOfItemProvider subLinkPropertyOfItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.SubLinkPropertyOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubLinkPropertyOfAdapter() {
		if (subLinkPropertyOfItemProvider == null) {
			subLinkPropertyOfItemProvider = new SubLinkPropertyOfItemProvider(this);
		}

		return subLinkPropertyOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DisjointLinkProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisjointLinkPropertyItemProvider disjointLinkPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DisjointLinkProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisjointLinkPropertyAdapter() {
		if (disjointLinkPropertyItemProvider == null) {
			disjointLinkPropertyItemProvider = new DisjointLinkPropertyItemProvider(this);
		}

		return disjointLinkPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DomainLinkProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainLinkPropertyItemProvider domainLinkPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DomainLinkProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainLinkPropertyAdapter() {
		if (domainLinkPropertyItemProvider == null) {
			domainLinkPropertyItemProvider = new DomainLinkPropertyItemProvider(this);
		}

		return domainLinkPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.RangeLinkPropertyOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RangeLinkPropertyOfItemProvider rangeLinkPropertyOfItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.RangeLinkPropertyOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRangeLinkPropertyOfAdapter() {
		if (rangeLinkPropertyOfItemProvider == null) {
			rangeLinkPropertyOfItemProvider = new RangeLinkPropertyOfItemProvider(this);
		}

		return rangeLinkPropertyOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.LinkPropertyList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkPropertyListItemProvider linkPropertyListItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.LinkPropertyList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkPropertyListAdapter() {
		if (linkPropertyListItemProvider == null) {
			linkPropertyListItemProvider = new LinkPropertyListItemProvider(this);
		}

		return linkPropertyListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.LinkPropertyInverseOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkPropertyInverseOfItemProvider linkPropertyInverseOfItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.LinkPropertyInverseOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkPropertyInverseOfAdapter() {
		if (linkPropertyInverseOfItemProvider == null) {
			linkPropertyInverseOfItemProvider = new LinkPropertyInverseOfItemProvider(this);
		}

		return linkPropertyInverseOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.Ontology} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologyItemProvider ontologyItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.Ontology}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologyAdapter() {
		if (ontologyItemProvider == null) {
			ontologyItemProvider = new OntologyItemProvider(this);
		}

		return ontologyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.Class} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassItemProvider classItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.Class}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassAdapter() {
		if (classItemProvider == null) {
			classItemProvider = new ClassItemProvider(this);
		}

		return classItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectPropertyItemProvider objectPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectPropertyAdapter() {
		if (objectPropertyItemProvider == null) {
			objectPropertyItemProvider = new ObjectPropertyItemProvider(this);
		}

		return objectPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DataProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataPropertyItemProvider dataPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DataProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataPropertyAdapter() {
		if (dataPropertyItemProvider == null) {
			dataPropertyItemProvider = new DataPropertyItemProvider(this);
		}

		return dataPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.NamedIndividual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedIndividualItemProvider namedIndividualItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.NamedIndividual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedIndividualAdapter() {
		if (namedIndividualItemProvider == null) {
			namedIndividualItemProvider = new NamedIndividualItemProvider(this);
		}

		return namedIndividualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.AnonymousIndividual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnonymousIndividualItemProvider anonymousIndividualItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.AnonymousIndividual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnonymousIndividualAdapter() {
		if (anonymousIndividualItemProvider == null) {
			anonymousIndividualItemProvider = new AnonymousIndividualItemProvider(this);
		}

		return anonymousIndividualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DisjointClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisjointClassItemProvider disjointClassItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DisjointClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisjointClassAdapter() {
		if (disjointClassItemProvider == null) {
			disjointClassItemProvider = new DisjointClassItemProvider(this);
		}

		return disjointClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DisjointUnion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisjointUnionItemProvider disjointUnionItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DisjointUnion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisjointUnionAdapter() {
		if (disjointUnionItemProvider == null) {
			disjointUnionItemProvider = new DisjointUnionItemProvider(this);
		}

		return disjointUnionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.EquivalentClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EquivalentClassItemProvider equivalentClassItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.EquivalentClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEquivalentClassAdapter() {
		if (equivalentClassItemProvider == null) {
			equivalentClassItemProvider = new EquivalentClassItemProvider(this);
		}

		return equivalentClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.SubClassOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubClassOfItemProvider subClassOfItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.SubClassOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubClassOfAdapter() {
		if (subClassOfItemProvider == null) {
			subClassOfItemProvider = new SubClassOfItemProvider(this);
		}

		return subClassOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DisjointObjectProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisjointObjectPropertyItemProvider disjointObjectPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DisjointObjectProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisjointObjectPropertyAdapter() {
		if (disjointObjectPropertyItemProvider == null) {
			disjointObjectPropertyItemProvider = new DisjointObjectPropertyItemProvider(this);
		}

		return disjointObjectPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.EquivalentObjectProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EquivalentObjectPropertyItemProvider equivalentObjectPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.EquivalentObjectProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEquivalentObjectPropertyAdapter() {
		if (equivalentObjectPropertyItemProvider == null) {
			equivalentObjectPropertyItemProvider = new EquivalentObjectPropertyItemProvider(this);
		}

		return equivalentObjectPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.SubObjectPropertyOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubObjectPropertyOfItemProvider subObjectPropertyOfItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.SubObjectPropertyOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubObjectPropertyOfAdapter() {
		if (subObjectPropertyOfItemProvider == null) {
			subObjectPropertyOfItemProvider = new SubObjectPropertyOfItemProvider(this);
		}

		return subObjectPropertyOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.InverseObjectPropertyAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InverseObjectPropertyAxiomItemProvider inverseObjectPropertyAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.InverseObjectPropertyAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInverseObjectPropertyAxiomAdapter() {
		if (inverseObjectPropertyAxiomItemProvider == null) {
			inverseObjectPropertyAxiomItemProvider = new InverseObjectPropertyAxiomItemProvider(this);
		}

		return inverseObjectPropertyAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectPropertyDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectPropertyDomainItemProvider objectPropertyDomainItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectPropertyDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectPropertyDomainAdapter() {
		if (objectPropertyDomainItemProvider == null) {
			objectPropertyDomainItemProvider = new ObjectPropertyDomainItemProvider(this);
		}

		return objectPropertyDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectPropertyRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectPropertyRangeItemProvider objectPropertyRangeItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectPropertyRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectPropertyRangeAdapter() {
		if (objectPropertyRangeItemProvider == null) {
			objectPropertyRangeItemProvider = new ObjectPropertyRangeItemProvider(this);
		}

		return objectPropertyRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DataPropertyDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataPropertyDomainItemProvider dataPropertyDomainItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DataPropertyDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataPropertyDomainAdapter() {
		if (dataPropertyDomainItemProvider == null) {
			dataPropertyDomainItemProvider = new DataPropertyDomainItemProvider(this);
		}

		return dataPropertyDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DataPropertyRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataPropertyRangeItemProvider dataPropertyRangeItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DataPropertyRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataPropertyRangeAdapter() {
		if (dataPropertyRangeItemProvider == null) {
			dataPropertyRangeItemProvider = new DataPropertyRangeItemProvider(this);
		}

		return dataPropertyRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DisjointDataProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisjointDataPropertyItemProvider disjointDataPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DisjointDataProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisjointDataPropertyAdapter() {
		if (disjointDataPropertyItemProvider == null) {
			disjointDataPropertyItemProvider = new DisjointDataPropertyItemProvider(this);
		}

		return disjointDataPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.EquivalentDataProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EquivalentDataPropertyItemProvider equivalentDataPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.EquivalentDataProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEquivalentDataPropertyAdapter() {
		if (equivalentDataPropertyItemProvider == null) {
			equivalentDataPropertyItemProvider = new EquivalentDataPropertyItemProvider(this);
		}

		return equivalentDataPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.SubDataPropertyOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubDataPropertyOfItemProvider subDataPropertyOfItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.SubDataPropertyOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubDataPropertyOfAdapter() {
		if (subDataPropertyOfItemProvider == null) {
			subDataPropertyOfItemProvider = new SubDataPropertyOfItemProvider(this);
		}

		return subDataPropertyOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ClassAssertion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassAssertionItemProvider classAssertionItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ClassAssertion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassAssertionAdapter() {
		if (classAssertionItemProvider == null) {
			classAssertionItemProvider = new ClassAssertionItemProvider(this);
		}

		return classAssertionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.SameIndividual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SameIndividualItemProvider sameIndividualItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.SameIndividual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSameIndividualAdapter() {
		if (sameIndividualItemProvider == null) {
			sameIndividualItemProvider = new SameIndividualItemProvider(this);
		}

		return sameIndividualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DifferentIndividual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DifferentIndividualItemProvider differentIndividualItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DifferentIndividual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDifferentIndividualAdapter() {
		if (differentIndividualItemProvider == null) {
			differentIndividualItemProvider = new DifferentIndividualItemProvider(this);
		}

		return differentIndividualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectPropertyAssertion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectPropertyAssertionItemProvider objectPropertyAssertionItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectPropertyAssertion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectPropertyAssertionAdapter() {
		if (objectPropertyAssertionItemProvider == null) {
			objectPropertyAssertionItemProvider = new ObjectPropertyAssertionItemProvider(this);
		}

		return objectPropertyAssertionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.NegativeObjectPropertyAssertion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegativeObjectPropertyAssertionItemProvider negativeObjectPropertyAssertionItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.NegativeObjectPropertyAssertion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegativeObjectPropertyAssertionAdapter() {
		if (negativeObjectPropertyAssertionItemProvider == null) {
			negativeObjectPropertyAssertionItemProvider = new NegativeObjectPropertyAssertionItemProvider(this);
		}

		return negativeObjectPropertyAssertionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DataPropertyAssertion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataPropertyAssertionItemProvider dataPropertyAssertionItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DataPropertyAssertion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataPropertyAssertionAdapter() {
		if (dataPropertyAssertionItemProvider == null) {
			dataPropertyAssertionItemProvider = new DataPropertyAssertionItemProvider(this);
		}

		return dataPropertyAssertionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.NegativeDataPropertyAssertion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegativeDataPropertyAssertionItemProvider negativeDataPropertyAssertionItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.NegativeDataPropertyAssertion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegativeDataPropertyAssertionAdapter() {
		if (negativeDataPropertyAssertionItemProvider == null) {
			negativeDataPropertyAssertionItemProvider = new NegativeDataPropertyAssertionItemProvider(this);
		}

		return negativeDataPropertyAssertionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ClassList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassListItemProvider classListItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ClassList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassListAdapter() {
		if (classListItemProvider == null) {
			classListItemProvider = new ClassListItemProvider(this);
		}

		return classListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectIntersectionOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectIntersectionOfItemProvider objectIntersectionOfItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectIntersectionOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectIntersectionOfAdapter() {
		if (objectIntersectionOfItemProvider == null) {
			objectIntersectionOfItemProvider = new ObjectIntersectionOfItemProvider(this);
		}

		return objectIntersectionOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectUnionOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectUnionOfItemProvider objectUnionOfItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectUnionOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectUnionOfAdapter() {
		if (objectUnionOfItemProvider == null) {
			objectUnionOfItemProvider = new ObjectUnionOfItemProvider(this);
		}

		return objectUnionOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectComplementOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectComplementOfItemProvider objectComplementOfItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectComplementOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectComplementOfAdapter() {
		if (objectComplementOfItemProvider == null) {
			objectComplementOfItemProvider = new ObjectComplementOfItemProvider(this);
		}

		return objectComplementOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectOneOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectOneOfItemProvider objectOneOfItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectOneOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectOneOfAdapter() {
		if (objectOneOfItemProvider == null) {
			objectOneOfItemProvider = new ObjectOneOfItemProvider(this);
		}

		return objectOneOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectSomeValuesFrom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectSomeValuesFromItemProvider objectSomeValuesFromItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectSomeValuesFrom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectSomeValuesFromAdapter() {
		if (objectSomeValuesFromItemProvider == null) {
			objectSomeValuesFromItemProvider = new ObjectSomeValuesFromItemProvider(this);
		}

		return objectSomeValuesFromItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectAllValuesFrom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectAllValuesFromItemProvider objectAllValuesFromItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectAllValuesFrom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectAllValuesFromAdapter() {
		if (objectAllValuesFromItemProvider == null) {
			objectAllValuesFromItemProvider = new ObjectAllValuesFromItemProvider(this);
		}

		return objectAllValuesFromItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectHasValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectHasValueItemProvider objectHasValueItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectHasValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectHasValueAdapter() {
		if (objectHasValueItemProvider == null) {
			objectHasValueItemProvider = new ObjectHasValueItemProvider(this);
		}

		return objectHasValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectMinCardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectMinCardinalityItemProvider objectMinCardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectMinCardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectMinCardinalityAdapter() {
		if (objectMinCardinalityItemProvider == null) {
			objectMinCardinalityItemProvider = new ObjectMinCardinalityItemProvider(this);
		}

		return objectMinCardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectMaxCardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectMaxCardinalityItemProvider objectMaxCardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectMaxCardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectMaxCardinalityAdapter() {
		if (objectMaxCardinalityItemProvider == null) {
			objectMaxCardinalityItemProvider = new ObjectMaxCardinalityItemProvider(this);
		}

		return objectMaxCardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectExactCardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectExactCardinalityItemProvider objectExactCardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectExactCardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectExactCardinalityAdapter() {
		if (objectExactCardinalityItemProvider == null) {
			objectExactCardinalityItemProvider = new ObjectExactCardinalityItemProvider(this);
		}

		return objectExactCardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DataSomeValuesFrom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSomeValuesFromItemProvider dataSomeValuesFromItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DataSomeValuesFrom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSomeValuesFromAdapter() {
		if (dataSomeValuesFromItemProvider == null) {
			dataSomeValuesFromItemProvider = new DataSomeValuesFromItemProvider(this);
		}

		return dataSomeValuesFromItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DataAllValuesFrom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataAllValuesFromItemProvider dataAllValuesFromItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DataAllValuesFrom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataAllValuesFromAdapter() {
		if (dataAllValuesFromItemProvider == null) {
			dataAllValuesFromItemProvider = new DataAllValuesFromItemProvider(this);
		}

		return dataAllValuesFromItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DataHasValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataHasValueItemProvider dataHasValueItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DataHasValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataHasValueAdapter() {
		if (dataHasValueItemProvider == null) {
			dataHasValueItemProvider = new DataHasValueItemProvider(this);
		}

		return dataHasValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DataMinCardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataMinCardinalityItemProvider dataMinCardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DataMinCardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataMinCardinalityAdapter() {
		if (dataMinCardinalityItemProvider == null) {
			dataMinCardinalityItemProvider = new DataMinCardinalityItemProvider(this);
		}

		return dataMinCardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DataMaxCardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataMaxCardinalityItemProvider dataMaxCardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DataMaxCardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataMaxCardinalityAdapter() {
		if (dataMaxCardinalityItemProvider == null) {
			dataMaxCardinalityItemProvider = new DataMaxCardinalityItemProvider(this);
		}

		return dataMaxCardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DataExactCardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataExactCardinalityItemProvider dataExactCardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DataExactCardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataExactCardinalityAdapter() {
		if (dataExactCardinalityItemProvider == null) {
			dataExactCardinalityItemProvider = new DataExactCardinalityItemProvider(this);
		}

		return dataExactCardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.LinkSomeValuesFrom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkSomeValuesFromItemProvider linkSomeValuesFromItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.LinkSomeValuesFrom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkSomeValuesFromAdapter() {
		if (linkSomeValuesFromItemProvider == null) {
			linkSomeValuesFromItemProvider = new LinkSomeValuesFromItemProvider(this);
		}

		return linkSomeValuesFromItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.LinkAllValuesFrom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkAllValuesFromItemProvider linkAllValuesFromItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.LinkAllValuesFrom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAllValuesFromAdapter() {
		if (linkAllValuesFromItemProvider == null) {
			linkAllValuesFromItemProvider = new LinkAllValuesFromItemProvider(this);
		}

		return linkAllValuesFromItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.LinkHasValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkHasValueItemProvider linkHasValueItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.LinkHasValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkHasValueAdapter() {
		if (linkHasValueItemProvider == null) {
			linkHasValueItemProvider = new LinkHasValueItemProvider(this);
		}

		return linkHasValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.LinkMinCardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkMinCardinalityItemProvider linkMinCardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.LinkMinCardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkMinCardinalityAdapter() {
		if (linkMinCardinalityItemProvider == null) {
			linkMinCardinalityItemProvider = new LinkMinCardinalityItemProvider(this);
		}

		return linkMinCardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.LinkMaxCardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkMaxCardinalityItemProvider linkMaxCardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.LinkMaxCardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkMaxCardinalityAdapter() {
		if (linkMaxCardinalityItemProvider == null) {
			linkMaxCardinalityItemProvider = new LinkMaxCardinalityItemProvider(this);
		}

		return linkMaxCardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.LinkExactCardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkExactCardinalityItemProvider linkExactCardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.LinkExactCardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkExactCardinalityAdapter() {
		if (linkExactCardinalityItemProvider == null) {
			linkExactCardinalityItemProvider = new LinkExactCardinalityItemProvider(this);
		}

		return linkExactCardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ObjectPropertyList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectPropertyListItemProvider objectPropertyListItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ObjectPropertyList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectPropertyListAdapter() {
		if (objectPropertyListItemProvider == null) {
			objectPropertyListItemProvider = new ObjectPropertyListItemProvider(this);
		}

		return objectPropertyListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.InverseObjectProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InverseObjectPropertyItemProvider inverseObjectPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.InverseObjectProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInverseObjectPropertyAdapter() {
		if (inverseObjectPropertyItemProvider == null) {
			inverseObjectPropertyItemProvider = new InverseObjectPropertyItemProvider(this);
		}

		return inverseObjectPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.DataPropertyList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataPropertyListItemProvider dataPropertyListItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.DataPropertyList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataPropertyListAdapter() {
		if (dataPropertyListItemProvider == null) {
			dataPropertyListItemProvider = new DataPropertyListItemProvider(this);
		}

		return dataPropertyListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.ConstantAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantAnnotationItemProvider constantAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.ConstantAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantAnnotationAdapter() {
		if (constantAnnotationItemProvider == null) {
			constantAnnotationItemProvider = new ConstantAnnotationItemProvider(this);
		}

		return constantAnnotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.AnnotationByEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationByEntityItemProvider annotationByEntityItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.AnnotationByEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationByEntityAdapter() {
		if (annotationByEntityItemProvider == null) {
			annotationByEntityItemProvider = new AnnotationByEntityItemProvider(this);
		}

		return annotationByEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mowl.Constant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantItemProvider constantItemProvider;

	/**
	 * This creates an adapter for a {@link mowl.Constant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantAdapter() {
		if (constantItemProvider == null) {
			constantItemProvider = new ConstantItemProvider(this);
		}

		return constantItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (multiontologyItemProvider != null) multiontologyItemProvider.dispose();
		if (linkPropertyItemProvider != null) linkPropertyItemProvider.dispose();
		if (equivalentLinkPropertyItemProvider != null) equivalentLinkPropertyItemProvider.dispose();
		if (subLinkPropertyOfItemProvider != null) subLinkPropertyOfItemProvider.dispose();
		if (disjointLinkPropertyItemProvider != null) disjointLinkPropertyItemProvider.dispose();
		if (domainLinkPropertyItemProvider != null) domainLinkPropertyItemProvider.dispose();
		if (rangeLinkPropertyOfItemProvider != null) rangeLinkPropertyOfItemProvider.dispose();
		if (linkPropertyListItemProvider != null) linkPropertyListItemProvider.dispose();
		if (linkPropertyInverseOfItemProvider != null) linkPropertyInverseOfItemProvider.dispose();
		if (ontologyItemProvider != null) ontologyItemProvider.dispose();
		if (classItemProvider != null) classItemProvider.dispose();
		if (objectPropertyItemProvider != null) objectPropertyItemProvider.dispose();
		if (dataPropertyItemProvider != null) dataPropertyItemProvider.dispose();
		if (namedIndividualItemProvider != null) namedIndividualItemProvider.dispose();
		if (anonymousIndividualItemProvider != null) anonymousIndividualItemProvider.dispose();
		if (disjointClassItemProvider != null) disjointClassItemProvider.dispose();
		if (disjointUnionItemProvider != null) disjointUnionItemProvider.dispose();
		if (equivalentClassItemProvider != null) equivalentClassItemProvider.dispose();
		if (subClassOfItemProvider != null) subClassOfItemProvider.dispose();
		if (disjointObjectPropertyItemProvider != null) disjointObjectPropertyItemProvider.dispose();
		if (equivalentObjectPropertyItemProvider != null) equivalentObjectPropertyItemProvider.dispose();
		if (subObjectPropertyOfItemProvider != null) subObjectPropertyOfItemProvider.dispose();
		if (inverseObjectPropertyAxiomItemProvider != null) inverseObjectPropertyAxiomItemProvider.dispose();
		if (objectPropertyDomainItemProvider != null) objectPropertyDomainItemProvider.dispose();
		if (objectPropertyRangeItemProvider != null) objectPropertyRangeItemProvider.dispose();
		if (dataPropertyDomainItemProvider != null) dataPropertyDomainItemProvider.dispose();
		if (dataPropertyRangeItemProvider != null) dataPropertyRangeItemProvider.dispose();
		if (disjointDataPropertyItemProvider != null) disjointDataPropertyItemProvider.dispose();
		if (equivalentDataPropertyItemProvider != null) equivalentDataPropertyItemProvider.dispose();
		if (subDataPropertyOfItemProvider != null) subDataPropertyOfItemProvider.dispose();
		if (classAssertionItemProvider != null) classAssertionItemProvider.dispose();
		if (sameIndividualItemProvider != null) sameIndividualItemProvider.dispose();
		if (differentIndividualItemProvider != null) differentIndividualItemProvider.dispose();
		if (objectPropertyAssertionItemProvider != null) objectPropertyAssertionItemProvider.dispose();
		if (negativeObjectPropertyAssertionItemProvider != null) negativeObjectPropertyAssertionItemProvider.dispose();
		if (dataPropertyAssertionItemProvider != null) dataPropertyAssertionItemProvider.dispose();
		if (negativeDataPropertyAssertionItemProvider != null) negativeDataPropertyAssertionItemProvider.dispose();
		if (classListItemProvider != null) classListItemProvider.dispose();
		if (objectIntersectionOfItemProvider != null) objectIntersectionOfItemProvider.dispose();
		if (objectUnionOfItemProvider != null) objectUnionOfItemProvider.dispose();
		if (objectComplementOfItemProvider != null) objectComplementOfItemProvider.dispose();
		if (objectOneOfItemProvider != null) objectOneOfItemProvider.dispose();
		if (objectSomeValuesFromItemProvider != null) objectSomeValuesFromItemProvider.dispose();
		if (objectAllValuesFromItemProvider != null) objectAllValuesFromItemProvider.dispose();
		if (objectHasValueItemProvider != null) objectHasValueItemProvider.dispose();
		if (objectMinCardinalityItemProvider != null) objectMinCardinalityItemProvider.dispose();
		if (objectMaxCardinalityItemProvider != null) objectMaxCardinalityItemProvider.dispose();
		if (objectExactCardinalityItemProvider != null) objectExactCardinalityItemProvider.dispose();
		if (dataSomeValuesFromItemProvider != null) dataSomeValuesFromItemProvider.dispose();
		if (dataAllValuesFromItemProvider != null) dataAllValuesFromItemProvider.dispose();
		if (dataHasValueItemProvider != null) dataHasValueItemProvider.dispose();
		if (dataMinCardinalityItemProvider != null) dataMinCardinalityItemProvider.dispose();
		if (dataMaxCardinalityItemProvider != null) dataMaxCardinalityItemProvider.dispose();
		if (dataExactCardinalityItemProvider != null) dataExactCardinalityItemProvider.dispose();
		if (linkSomeValuesFromItemProvider != null) linkSomeValuesFromItemProvider.dispose();
		if (linkAllValuesFromItemProvider != null) linkAllValuesFromItemProvider.dispose();
		if (linkHasValueItemProvider != null) linkHasValueItemProvider.dispose();
		if (linkMinCardinalityItemProvider != null) linkMinCardinalityItemProvider.dispose();
		if (linkMaxCardinalityItemProvider != null) linkMaxCardinalityItemProvider.dispose();
		if (linkExactCardinalityItemProvider != null) linkExactCardinalityItemProvider.dispose();
		if (objectPropertyListItemProvider != null) objectPropertyListItemProvider.dispose();
		if (inverseObjectPropertyItemProvider != null) inverseObjectPropertyItemProvider.dispose();
		if (dataPropertyListItemProvider != null) dataPropertyListItemProvider.dispose();
		if (constantAnnotationItemProvider != null) constantAnnotationItemProvider.dispose();
		if (annotationByEntityItemProvider != null) annotationByEntityItemProvider.dispose();
		if (constantItemProvider != null) constantItemProvider.dispose();
	}

}
