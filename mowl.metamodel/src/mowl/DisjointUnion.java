/**
 */
package mowl;

import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Disjoint Union</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@link mowl.DisjointUnion#getExpressions <em>Expressions</em>}</li>
 * </ul>
 * </p>
 *
 * @see mowl.mowlPackage#getDisjointUnion()
 * @model annotation="http://www.eclipse.org/emf/2002/Ecore constraints='localDisjointUnionClassesClassList localDisjointUnionClassesObjectIntersectionOf localDisjointUnionClassesObjectUnionOf localDisjointUnionClassesObjectSomeValuesFrom localDisjointUnionClassesObjectAllValuesFrom localDisjointUnionClassesObjectHasValue localDisjointUnionClassesObjectComplementOf localDisjointUnionClassesObjectOneOf localDisjointUnionClassesObjectMinCardinality localDisjointUnionClassesObjectMaxCardinality localDisjointUnionClassesObjectExactCardinality localDisjointUnionClassesDataSomeValuesFrom localDisjointUnionClassesDataAllValuesFrom localDisjointUnionClassesDataHasValue localDisjointUnionClassesDataMinCardinality localDisjointUnionClassesDataMaxCardinality localDisjointUnionClassesDataExactCardinality externalDisjointUnionClassesLinkPropertySomeValuesFrom externalDisjointUnionClassesLinkPropertyAllValuesFrom externalDisjointUnionClassesLinkPropertyHasValue externalDisjointUnionClassesLinkPropertyMinCardinality externalDisjointUnionClassesLinkPropertyMaxCardinality externalDisjointUnionClassesLinkPropertyExactCardinality'"
 *        annotation="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot localDisjointUnionClassesClassList='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ClassList)) implies sc.oclAsType(ClassList).classes->forAll(c:Class | c.ontology = self.classAxiom.ontology))' localDisjointUnionClassesObjectIntersectionOf='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectIntersectionOf)) implies sc.oclAsType(ObjectIntersectionOf).classes->forAll(c:Class| c.ontology = self.classAxiom.ontology))' localDisjointUnionClassesObjectUnionOf='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectUnionOf)) implies sc.oclAsType(ObjectUnionOf).classes->forAll(c:Class| c.ontology = self.classAxiom.ontology))' localDisjointUnionClassesObjectSomeValuesFrom='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectSomeValuesFrom)) implies sc.oclAsType(ObjectSomeValuesFrom).classes.ontology = self.classAxiom.ontology) and\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectSomeValuesFrom)) implies sc.oclAsType(ObjectSomeValuesFrom).objectProperties.ontology = self.classAxiom.ontology)' localDisjointUnionClassesObjectAllValuesFrom='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectAllValuesFrom)) implies sc.oclAsType(ObjectAllValuesFrom).classes.ontology = self.classAxiom.ontology) and\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectAllValuesFrom)) implies sc.oclAsType(ObjectAllValuesFrom).objectProperties.ontology = self.classAxiom.ontology)' localDisjointUnionClassesObjectHasValue='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectHasValue)) implies sc.oclAsType(ObjectHasValue).objectProperties.ontology = self.classAxiom.ontology)' localDisjointUnionClassesObjectComplementOf='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectComplementOf)) implies sc.oclAsType(ObjectComplementOf).classes.ontology = self.classAxiom.ontology)' localDisjointUnionClassesObjectOneOf='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectOneOf)) implies sc.oclAsType(ObjectOneOf).individual.ontology = self.classAxiom.ontology)' localDisjointUnionClassesObjectMinCardinality='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectMinCardinality)) implies sc.oclAsType(ObjectMinCardinality).classes.ontology = self.classAxiom.ontology) and\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectMinCardinality)) implies sc.oclAsType(ObjectMinCardinality).objectProperties.ontology = self.classAxiom.ontology)' localDisjointUnionClassesObjectMaxCardinality='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectMaxCardinality)) implies sc.oclAsType(ObjectMaxCardinality).classes.ontology = self.classAxiom.ontology) and\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectMaxCardinality)) implies sc.oclAsType(ObjectMaxCardinality).objectProperties.ontology = self.classAxiom.ontology)' localDisjointUnionClassesObjectExactCardinality='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectExactCardinality)) implies sc.oclAsType(ObjectExactCardinality).classes.ontology = self.classAxiom.ontology) and\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(ObjectExactCardinality)) implies sc.oclAsType(ObjectExactCardinality).objectProperties.ontology = self.classAxiom.ontology)' localDisjointUnionClassesDataSomeValuesFrom='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(DataSomeValuesFrom)) implies sc.oclAsType(DataSomeValuesFrom).dataProperties.ontology = self.classAxiom.ontology)' localDisjointUnionClassesDataAllValuesFrom='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(DataAllValuesFrom)) implies sc.oclAsType(DataAllValuesFrom).dataProperties.ontology = self.classAxiom.ontology)' localDisjointUnionClassesDataHasValue='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(DataHasValue)) implies sc.oclAsType(DataHasValue).dataProperties.ontology = self.classAxiom.ontology)' localDisjointUnionClassesDataMinCardinality='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(DataMinCardinality)) implies sc.oclAsType(DataMinCardinality).dataProperties.ontology = self.classAxiom.ontology)' localDisjointUnionClassesDataMaxCardinality='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(DataMaxCardinality)) implies sc.oclAsType(DataMaxCardinality).dataProperties.ontology = self.classAxiom.ontology)' localDisjointUnionClassesDataExactCardinality='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(ClassExpression) and sc.oclIsKindOf(DataExactCardinality)) implies sc.oclAsType(DataExactCardinality).dataProperties.ontology = self.classAxiom.ontology)' externalDisjointUnionClassesLinkPropertySomeValuesFrom='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(EConnectionExpression) and sc.oclIsKindOf(LinkSomeValuesFrom)) implies (sc.oclAsType(LinkSomeValuesFrom).linkProperties.sourceOntology = self.classAxiom.ontology and sc.oclAsType(LinkSomeValuesFrom).classes.ontology = sc.oclAsType(LinkSomeValuesFrom).linkProperties.targetOntology))' externalDisjointUnionClassesLinkPropertyAllValuesFrom='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(EConnectionExpression) and sc.oclIsKindOf(LinkAllValuesFrom)) implies (sc.oclAsType(LinkAllValuesFrom).linkProperties.sourceOntology = self.classAxiom.ontology and sc.oclAsType(LinkAllValuesFrom).classes.ontology = sc.oclAsType(LinkAllValuesFrom).linkProperties.targetOntology))' externalDisjointUnionClassesLinkPropertyHasValue='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(EConnectionExpression) and sc.oclIsKindOf(LinkHasValue)) implies (sc.oclAsType(LinkHasValue).linkProperties.sourceOntology = self.classAxiom.ontology and sc.oclAsType(LinkHasValue).individual.ontology = sc.oclAsType(LinkHasValue).linkProperties.targetOntology))' externalDisjointUnionClassesLinkPropertyMinCardinality='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(EConnectionExpression) and sc.oclIsKindOf(LinkMinCardinality)) implies (sc.oclAsType(LinkMinCardinality).linkProperties.sourceOntology = self.classAxiom.ontology and sc.oclAsType(LinkMinCardinality).classes.ontology = sc.oclAsType(LinkMinCardinality).linkProperties.targetOntology))' externalDisjointUnionClassesLinkPropertyMaxCardinality='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(EConnectionExpression) and sc.oclIsKindOf(LinkMaxCardinality)) implies (sc.oclAsType(LinkMaxCardinality).linkProperties.sourceOntology = self.classAxiom.ontology and sc.oclAsType(LinkMaxCardinality).classes.ontology = sc.oclAsType(LinkMaxCardinality).linkProperties.targetOntology))' externalDisjointUnionClassesLinkPropertyExactCardinality='\n\t\t\tself.expressions->forAll(sc: Expression | (sc.oclIsKindOf(EConnectionExpression) and sc.oclIsKindOf(LinkExactCardinality)) implies (sc.oclAsType(LinkExactCardinality).linkProperties.sourceOntology = self.classAxiom.ontology and sc.oclAsType(LinkExactCardinality).classes.ontology = sc.oclAsType(LinkExactCardinality).linkProperties.targetOntology))'"
 * @generated
 */
public interface DisjointUnion extends ClassAxiom {
	/**
	 * Returns the value of the '<em><b>Expressions</b></em>' containment reference list.
	 * The list contents are of type {@link mowl.Expression}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Expressions</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Expressions</em>' containment reference list.
	 * @see mowl.mowlPackage#getDisjointUnion_Expressions()
	 * @model containment="true" required="true" ordered="false"
	 * @generated
	 */
	EList<Expression> getExpressions();

} // DisjointUnion
